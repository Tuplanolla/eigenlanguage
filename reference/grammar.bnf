% The full syntax is

file : module
     | expression

module : "<->" module-form module-pair-list

module-form : module-name
            | "{" module-name any-module-parameters "}"

module-name : NAME

module-parameter : SYMBOL

module-pair-list : "{" any-module-pairs "}"

module-pair : "->" export-list
            | "<-" import-list
            | SYMBOL expression

export-list : "{" any-exports "}"

export : export-form
       | export-alias

export-form : SYMBOL

export-alias : "{" "=" export-pair-list "}"

export-pair-list : "{" any-export-pairs "}"

export-pair : SYMBOL export-form

import-list : "{" any-imports "}"

import : import-form
       | import-alias-pair-list

import-form : import-name
            | "{" import-name any-import-arguments "}"

import-name : NAME

import-argument : expression % perhaps with some restrictions

import-alias-pair-list : "{" any-import-alias-pairs "}"

import-alias-pair : "=" import-pair-list

import-pair-list : "{" any-import-pairs "}"

import-pair : SYMBOL import-form

function : "->" function-form function-body

function-form : function-parameter
              | function-parameter-list

function-parameter-list : "{" any-function-parameters "}"

function-parameter : SYMBOL

function-body : expression

binding : "=" binding-pair-list binding-body

binding-pair-list : "{" any-binding-pairs "}"

binding-pair : SYMBOL expression

binding-body : expression

expression : "(" many-expressions ")"
           | "[" many-expressions "]"
           | "`" expression
           | "," expression
           | "``" expression
           | ",," expression
           | value
           | SYMBOL

value : SINGLETON
      | INTEGER
      | CHARACTER
      | STRING

% where for all x

maybe-x : NOTHING
        | x

any-x : NOTHING
      | many-x

% and using left recursion

many-x : x
       | many-x x

% or right recursion

many-x : x
       | x many-x

% depending on the parser.
